generator client {
  provider      = "prisma-client-js"
  // binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum OnlineStatus {
  ONLINE
  AWAY
  OFFLINE
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  phone           String?        @unique
  password        String?
  googleId        String?        @unique
  isChef          Boolean        @default(false)
  isAdmin         Boolean        @default(false)
  emailVerifiedAt DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  profile         Profile?
  cookProfile     CookProfile?
  orders          Order[] // as customer
  reviews         Review[] // as reviewer
  favorites       UserFavorite[]
  cart            Cart?
  onlineStatus    OnlineStatus   @default(OFFLINE)
  lastSeen        LastSeen?
  chefApplication ChefApplication?
  notifications   Notification[]
  subscriptions   Subscription[]
  conversations   Conversation[]
  sentMessages    Message[]      @relation("MessageSender")
  receivedMessages Message[]     @relation("MessageReceiver")
}

model Profile {
  id          BigInt    @id @default(autoincrement())
  userId      Int       @unique
  user        User      @relation(fields: [userId], references: [id])
  firstName   String // keep existing field
  lastName    String // keep existing field
  avatar      String? // keep existing field
  addresses   Address[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Address {
  id           BigInt   @id @default(autoincrement())
  profileId    BigInt
  profile      Profile  @relation(fields: [profileId], references: [id])
  title        String
  addressLine1 String
  addressLine2 String?
  city         String
  district     String
  latitude     Float?
  longitude    Float?
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model CookProfile {
  id                 Int                @id @default(autoincrement())
  userId             Int                @unique
  user               User               @relation(fields: [userId], references: [id])
  businessName       String
  description        String?
  cuisineTypes       Json // array of cuisines
  verificationStatus VerificationStatus @default(PENDING)
  rating             Float              @default(0)
  location           Json? // coordinates
  dishes             Dish[]
  operatingHours     Json? // Store hours as JSON
  orderItems         OrderItem[] // Replace orders field
  reviews            Review[] // received reviews
  totalEarnings      Float              @default(0)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  onlineStatus       OnlineStatus       @default(OFFLINE)
  subscribers        Subscription[]
  minOrderAmount     Float?   // Minimum order amount
  maxOrdersPerSlot   Int?     // Maximum number of orders per time slot
  bankDetails        Json?    // Encrypted bank information
}

// Remove OperatingHour model since we're storing hours in CookProfile

model Category {
  id            Int            @id @default(autoincrement())
  name          String
  slug          String         @unique
  image         String?        // URL to category image
  description   String?        // Category description
  parentId      Int?
  parent        Category?      @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories Category[]     @relation("CategoryHierarchy")
  dishes        DishCategory[]
  chefApplicationsMain    ChefApplication[] @relation("ChefApplicationMainCategories")
  chefApplicationsSub     ChefApplication[] @relation("ChefApplicationSubCategories")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model FoodType {
  id          Int             @id @default(autoincrement())
  name        String
  slug        String          @unique
  description String?
  image       String?
  dishes      DishFoodType[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())
}

model DishFoodType {
  dishId     BigInt
  dish       Dish      @relation(fields: [dishId], references: [id])
  foodTypeId Int
  foodType   FoodType  @relation(fields: [foodTypeId], references: [id])

  @@id([dishId, foodTypeId])
}

model Dish {
  id              BigInt         @id @default(autoincrement())
  cookId          Int
  cook            CookProfile    @relation(fields: [cookId], references: [id])
  name            String
  description     String?
  price           Float
  preparationTime Int // minutes
  images          Json? // array of URLs
  status          String         @default("ACTIVE") // active/inactive
  isAvailable     Boolean        @default(true)
  availableFrom   DateTime?
  availableUntil  DateTime?
  maxDailyQuantity Int?
  categories      DishCategory[]
  foodTypes       DishFoodType[] // Add this line
  orderItems      OrderItem[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @default(now())
  userFavorites   UserFavorite[]
  cartItems       CartItem[]
}

model DishCategory {
  dishId     BigInt
  dish       Dish     @relation(fields: [dishId], references: [id])
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([dishId, categoryId])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  ON_DELIVERY
  DELIVERED
  CANCELLED
}

model Order {
  id              BigInt               @id @default(autoincrement())
  customerId      Int
  customer        User                 @relation(fields: [customerId], references: [id])
  items           OrderItem[]
  status          OrderStatus          @default(PENDING)
  totalAmount     Float
  deliveryDetails Json?
  statusHistory   OrderStatusHistory[]
  review          Review?
  payment         Payment?
  scheduledFor    DateTime
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @default(now())
}

model OrderItem {
  id             BigInt   @id @default(autoincrement())
  orderId        BigInt
  order          Order    @relation(fields: [orderId], references: [id])
  dishId         BigInt
  dish           Dish     @relation(fields: [dishId], references: [id])
  cookId         Int
  cook           CookProfile @relation(fields: [cookId], references: [id])
  quantity       Int
  unitPrice      Float
  totalPrice     Float
  customizations Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now())
}

model OrderStatusHistory {
  id        BigInt      @id @default(autoincrement())
  orderId   BigInt
  order     Order       @relation(fields: [orderId], references: [id])
  status    OrderStatus
  comment   String?
  createdAt DateTime    @default(now())
}

model Review {
  id         BigInt      @id @default(autoincrement())
  orderId    BigInt      @unique
  order      Order       @relation(fields: [orderId], references: [id])
  customerId Int
  customer   User        @relation(fields: [customerId], references: [id])
  cookId     Int
  cook       CookProfile @relation(fields: [cookId], references: [id])
  rating     Int
  comment    String?
  metrics    Json? // additional ratings
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentProvider {
  STRIPE
  PAYPAL
}

model Payment {
  id               BigInt          @id @default(autoincrement())
  orderId          BigInt          @unique
  order            Order           @relation(fields: [orderId], references: [id])
  amount           Float
  status           PaymentStatus   @default(PENDING)
  transactionId    String?
  provider         PaymentProvider
  providerResponse Json?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now())
}

model UserFavorite {
  id        BigInt   @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  dishId    BigInt
  dish      Dish     @relation(fields: [dishId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, dishId])
}

model Cart {
  id        BigInt      @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())

  @@unique([userId])
}

model CartItem {
  id            BigInt   @id @default(autoincrement())
  cartId        BigInt
  cart          Cart     @relation(fields: [cartId], references: [id])
  dishId        BigInt
  dish          Dish     @relation(fields: [dishId], references: [id])
  quantity      Int      @default(1)
  scheduledFor  DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  @@unique([cartId, dishId, scheduledFor])
}

model LastSeen {
  id        BigInt   @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  timestamp DateTime @default(now())
  platform  String?  // web, mobile, etc.
  deviceId  String?
  ip        String?

  @@index([timestamp])
}

model ChefApplication {
  id                 Int               @id @default(autoincrement())
  userId            Int               @unique
  user              User              @relation(fields: [userId], references: [id])
  businessName      String
  description       String
  mainCategories    Category[]        @relation("ChefApplicationMainCategories")
  subCategories     Category[]        @relation("ChefApplicationSubCategories")
  certificateFiles  Json?             // array of { filename, path, mimetype }
  documentFiles     Json?             // array of { filename, path, mimetype }
  status            ApplicationStatus @default(PENDING)
  reviewedAt        DateTime?
  reviewNotes       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())
}

enum NotificationType {
  ORDER_STATUS
  NEW_MESSAGE
  SUBSCRIPTION
  SYSTEM
  REVIEW
}

model Notification {
  id        BigInt           @id @default(autoincrement())
  userId    Int
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  title     String
  message   String
  data      Json?            // Additional data related to notification
  isRead    Boolean         @default(false)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())

  @@index([userId, isRead])
  @@index([createdAt])
}

model Subscription {
  id        BigInt      @id @default(autoincrement())
  userId    Int
  user      User        @relation(fields: [userId], references: [id])
  cookId    Int
  cook      CookProfile @relation(fields: [cookId], references: [id])
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())

  @@unique([userId, cookId], name: "userId_cookId")
  @@index([cookId])
}

model Conversation {
  id        BigInt    @id @default(autoincrement())
  users     User[]    // Many-to-many relation with users
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model Message {
  id             BigInt       @id @default(autoincrement())
  conversationId BigInt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       Int
  sender         User         @relation("MessageSender", fields: [senderId], references: [id])
  receiverId     Int
  receiver       User         @relation("MessageReceiver", fields: [receiverId], references: [id])
  content        String
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

  @@index([conversationId])
  @@index([senderId])
  @@index([receiverId])
  @@index([createdAt])
}
